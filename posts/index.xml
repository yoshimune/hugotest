<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hugo Test</title>
    <link>https://yoshimune.github.io/hugotest/posts/</link>
    <description>Recent content in Posts on Hugo Test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Sep 2019 16:59:03 +0900</lastBuildDate>
    
	<atom:link href="https://yoshimune.github.io/hugotest/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo on Github Pages</title>
      <link>https://yoshimune.github.io/hugotest/posts/hugo-on-github-pages/</link>
      <pubDate>Sun, 08 Sep 2019 16:59:03 +0900</pubDate>
      
      <guid>https://yoshimune.github.io/hugotest/posts/hugo-on-github-pages/</guid>
      <description>Summary Hugoで生成したサイトをGitHub Pagesでホスティングする方法を解説します
Reference Host on GitHub - HUGO
User, Organization, and Project Pages - GitHub Help
GitHub Pages GitHub Pages Type GitHub Pagesには２つのタイプがあります
 ユーザー/組織ページ  ユーザー、または組織のアカウント名に紐づくページを作成します  プロジェクトページ  プロジェクトリポジトリに紐づくページを作成します。   今回はプロジェクトページを利用します
公開方法タイプ 公開方法にも２つタイプがあります。
 masterブランチのルートディレクトリに公開用ディレクトリdocsを作成する 公開用ブランチgh-pagesを作成する  今回は2.の方法を採用します。2.の方法は公開するサイトとソースコードを分離してバージョン管理することができ、バージョン管理がやりやすいという利点があります。
公開方法手順 公開用ブランチgh-pagesにはサイトに関するファイル以外コミットしないようにします。そのため、gh-pagesブランチはorphan branchとして作成します。
サイトに関連するファイルはすべてpublicフォルダに生成されます。gh-pagesブランチはこのフォルダのみコミットしていきます。逆にmasterブランチはpublicフォルダを無視するようにします。
コンフィグ修正 config.tomlを修正してGitHub Pagesで公開するための設定を行います。config.tomlを開いて、以下の箇所を修正します。
baseURL = &amp;quot;https://yoshimune.github.io/hugotest/&amp;quot;  baseURLはプロジェクト毎に適切なものを設定します。基本的にはhttps://&amp;lt;USER_NAME&amp;gt;.github.io/&amp;lt;PROJECT_NAME&amp;gt;/という形式になっています。
正確に調べたい場合はGitHubのプロジェクトのページへ行き、 Settings 画面の下部 GitHub Pages のところにURLが書いてあります


もしこの場所にURLが書いてなければ一旦この手順を飛ばしても構いません。gh-pagesブランチをpushした後には表示されているはずです。
.gitignore .gitignoreファイルにpublicフォルダを追加してください
gh-pages ブランチ作成 gh-pagesブランチはorphan branchとして作成します</description>
    </item>
    
    <item>
      <title>Hugo Quick Start</title>
      <link>https://yoshimune.github.io/hugotest/posts/hugo-quick-start/</link>
      <pubDate>Sun, 08 Sep 2019 15:41:27 +0900</pubDate>
      
      <guid>https://yoshimune.github.io/hugotest/posts/hugo-quick-start/</guid>
      <description>Summary Hugoの使い方をまとめます。
本チャプターでは以下の事項について説明します
 Hugoダウンロード 初期設定 テストサイト生成 テーマ設定 記事投稿 ローカルサーバー起動  Reference HUGO
Hugoとは Hugoはウェブサイトを構築するためのフレームワークです。Hugoを使って簡単に静的サイトを生成することができます。
Hugoの特徴 Hugoの特徴は以下の２つです
 Go言語を使って開発されている 高速でサイト生成が可能   HugoはGoで作成されていますが、Hugoを使用する上でGoの開発環境をセットアップする必要はありません。Hugoはコンパイル済みバイナリファイルとして配布されています。
 Hugo セットアップ ここからHugoのセットアップ方法について解説します。ここではWindows10を使用していることを前提に解説を進めます。Windows以外のプラットフォームでのセットアップ方法は、公式のリファレンスを参照してください。
前提条件 gitが使えるようにしておいてください
Hugoダウンロード HugoのリリースページからHugoのzipファイルを適当な場所にダウンロードします。今回はhugo_0.58.1_Windows-64bit.zip をダウンロードしました。
ダウンロードが完了したら、zipファイルを解凍します。
初期設定 Hugoの初期設定を行います
プロジェクトフォルダ まず、プロジェクトを管理するための場所を用意します。今回はD:\Hugoにプロジェクトを配置することにしました。もちろん、各自の環境に合わせて適切な場所を用意して大丈夫です。
D:\Hugo配下に、Hugo本体を格納するbinフォルダと生成したサイトを格納するSitesフォルダを作成します。
binフォルダ配下に、ダウンロードして解凍したHugoフォルダの中身をすべて入れます。
パス設定 D:\Hugo\binにPathを通します。
システムの詳細設定 → 環境変数ウィンドウを開き、Path変数にD:\Hugo\binを追加します。
動作確認 コマンドプロンプトを開き、以下のコマンドを入力してください。
PS D:\Hugo\Sites&amp;gt; hugo new site example.com  次のような文言が表示されれば設定完了です
PS D:\Hugo&amp;gt; hugo help hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.</description>
    </item>
    
  </channel>
</rss>